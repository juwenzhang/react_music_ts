{"version":3,"file":"static/js/558.3ae97df0.chunk.js","mappings":"iKAmBA,SAASA,IACP,MAAO,CACLC,WAAYC,MAAMC,KAAK,CAAEC,OAAQ,IAAK,KAfjC,CACLC,GAAIC,EAAAA,EAAMC,OAAOC,OACjBC,MAAOH,EAAAA,EAAMI,MAAMC,WACnBC,SAAUN,EAAAA,EAAMO,MAAMC,gBAAgB,CACpCC,MCV6B,IDW7BC,OCV8B,MDYhCC,YAAaX,EAAAA,EAAMI,MAAMQ,YACzBC,UAAWb,EAAAA,EAAMc,KAAKC,OACtBC,UAAWhB,EAAAA,EAAMc,KAAKC,WAU1B,C,aElBA,MAAME,EAA0BA,KAC9B,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAmC,KAChEC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAmB,IAiC7D,OA/BAG,EAAAA,EAAAA,YAAU,KACRJ,EAAczB,IAA2BC,WAAW,GACnD,KAGH4B,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAiC,IAAIC,sBACxCC,IACCA,EAAQC,SAASC,IACf,GAAIA,EAAMC,eAAgB,CACxB,MAAMC,EAAgBC,OACpBH,EAAMI,OAAOC,aAAa,eAEvBZ,EAAca,SAASJ,IAC1BR,GAAkBa,GAAS,IAAIA,EAAML,KAEvCN,EAASY,UAAUR,EAAMI,OAC3B,IACA,IAQN,OAJoBK,SAASC,iBAAiB,mBAClCX,SAASY,IACnBf,EAASgB,QAAQD,EAAI,IAEhB,KACLf,EAASiB,YAAY,CACtB,GACA,CAACpB,KAGFqB,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAAAC,UACPF,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,OAAAE,SACG1B,GACCA,EAAW2B,KAAI,CAACC,EAAMhB,KAElBY,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAGK,KAAMD,EAAKxC,SAASsC,UACrBF,EAAAA,EAAAA,KAAA,OACEM,IAAKF,EAAKxC,SACV,aAAYwB,EACZmB,IAAKH,EAAK3C,MACVA,MAAO2C,EAAK3C,MACZ+C,MAAO,CACLzC,MAAO,QACPC,OAAQ,cATNoC,EAAK/C,WAkBhB,EAIf,GAAeoD,EAAAA,EAAAA,MAAKlC,E","sources":["fakers/recommend-faker.ts","constants/banner.ts","views/discover/pages/recommend/recommend-page.tsx"],"sourcesContent":["import { faker } from '@faker-js/faker';\nimport { BANNER_IMAGE_HEIGHT, BANNER_IMAGE_WIDTH } from '@/constants/banner';\n\ntype BannerDataTemplateType = ReturnType<typeof BannerDataTemplate>;\ntype RecommendFakerDataType = ReturnType<typeof createRecommendFakerData>;\nfunction BannerDataTemplate() {\n  return {\n    id: faker.string.uuid(),\n    title: faker.lorem.sentence(),\n    imageUrl: faker.image.urlPicsumPhotos({\n      width: BANNER_IMAGE_WIDTH,\n      height: BANNER_IMAGE_HEIGHT,\n    }),\n    description: faker.lorem.paragraph(),\n    createdAt: faker.date.past(),\n    updatedAt: faker.date.past(),\n  };\n}\n\nfunction createRecommendFakerData() {\n  return {\n    bannerData: Array.from({ length: 5 }, () =>\n      BannerDataTemplate(),\n    ) as BannerDataTemplateType[],\n  };\n}\n\nexport {\n  createRecommendFakerData,\n  type BannerDataTemplateType,\n  type RecommendFakerDataType,\n};\n","const BANNER_IMAGE_WIDTH: number = 730;\nconst BANNER_IMAGE_HEIGHT: number = 300;\n\nexport { BANNER_IMAGE_WIDTH, BANNER_IMAGE_HEIGHT };\n","import React, { Fragment, memo, useEffect, useState } from 'react';\nimport {\n  createRecommendFakerData,\n  type BannerDataTemplateType,\n} from '@/fakers/recommend-faker';\nimport { BANNER_IMAGE_HEIGHT, BANNER_IMAGE_WIDTH } from '@/constants/banner';\n\nconst recommendPage: React.FC = () => {\n  const [bannerList, setBannerList] = useState<BannerDataTemplateType[]>([]);\n  const [visibleImages, setVisibleImages] = useState<number[]>([]);\n  // 初始化数据\n  useEffect(() => {\n    setBannerList(createRecommendFakerData().bannerData);\n  }, []);\n\n  // todo 实现图片懒加载\n  useEffect(() => {\n    const observer: IntersectionObserver = new IntersectionObserver(\n      (entries: IntersectionObserverEntry[]) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const index: number = Number(\n              entry.target.getAttribute('data-index'),\n            );\n            if (!visibleImages.includes(index)) {\n              setVisibleImages((prev) => [...prev, index]);\n            }\n            observer.unobserve(entry.target);\n          }\n        });\n      },\n    );\n    // todo 获取需要被监听的元素集合\n    const imgElements = document.querySelectorAll('img[data-index]');\n    imgElements.forEach((img: Element) => {\n      observer.observe(img);\n    });\n    return () => {\n      observer.disconnect();\n    };\n  }, [visibleImages]);\n\n  return (\n    <Fragment>\n      <div>\n        <div>\n          {bannerList &&\n            bannerList.map((item, index) => {\n              return (\n                <div key={item.id}>\n                  <a href={item.imageUrl}>\n                    <img\n                      src={item.imageUrl}\n                      data-index={index}\n                      alt={item.title}\n                      title={item.title}\n                      style={{\n                        width: `${BANNER_IMAGE_WIDTH}px`,\n                        height: `${BANNER_IMAGE_HEIGHT}px`,\n                      }}\n                    />\n                  </a>\n                </div>\n              );\n            })}\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default memo(recommendPage);\n"],"names":["createRecommendFakerData","bannerData","Array","from","length","id","faker","string","uuid","title","lorem","sentence","imageUrl","image","urlPicsumPhotos","width","height","description","paragraph","createdAt","date","past","updatedAt","recommendPage","bannerList","setBannerList","useState","visibleImages","setVisibleImages","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","index","Number","target","getAttribute","includes","prev","unobserve","document","querySelectorAll","img","observe","disconnect","_jsx","Fragment","children","map","item","href","src","alt","style","memo"],"sourceRoot":""}