{"version":3,"file":"static/js/225.46fb6453.chunk.js","mappings":"mLAWA,MAAMA,EAA0BA,KAE9B,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,UAClCC,EAAAA,GAAWC,SAASC,EAAAA,KAAuB,KAEtCC,EAAeC,IAAoBL,EAAAA,EAAAA,UAAmB,IAiC7D,OA/BAM,EAAAA,EAAAA,YAAU,KACRP,EAAc,GAAG,GAChB,KAGHO,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAiC,IAAIC,sBACxCC,IACCA,EAAQC,SAASC,IACf,GAAIA,EAAMC,eAAgB,CACxB,MAAMC,EAAgBC,OACpBH,EAAMI,OAAOC,aAAa,eAEvBZ,EAAca,SAASJ,IAC1BR,GAAkBa,GAAS,IAAIA,EAAML,KAEvCN,EAASY,UAAUR,EAAMI,OAC3B,IACA,IAQN,OAJoBK,SAASC,iBAAiB,mBAClCX,SAASY,IACnBf,EAASgB,QAAQD,EAAI,IAEhB,KACLf,EAASiB,YAAY,CACtB,GACA,CAACpB,KAGFqB,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CAAAC,UACPF,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,OAAKG,MAAO,CAAEC,QAAS,OAAQC,SAAU,QAASH,SAC/C7B,GACCA,EAAWiC,KAAI,CAACC,EAAMnB,KAElBY,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAGQ,KAAMD,EAAKE,SAASP,UACrBF,EAAAA,EAAAA,KAAA,OACEU,IAAKH,EAAKE,SACV,aAAYrB,EACZuB,IAAKJ,EAAKK,MACVA,MAAOL,EAAKK,MACZT,MAAO,CACLU,MAAO,GAAGC,EAAAA,OACVC,OAAQ,GAAGC,EAAAA,aATTT,EAAKU,WAkBhB,EAIf,GAAeC,EAAAA,EAAAA,MAAK9C,E","sources":["views/discover/pages/recommend/recommend-page.tsx"],"sourcesContent":["import React, { Fragment, memo, useEffect, useState } from 'react';\nimport { type BannerDataTemplateType } from '@/views/discover/pages/recommend/faker/recommend-fakerBanners';\nimport {\n  BANNER_IMAGE_HEIGHT,\n  BANNER_IMAGE_WIDTH,\n  BANNER_IMAGE_ARRAY,\n} from '@/constants/banner';\nimport { localCache } from '@/utils';\n// import { useAppDispatch } from '@/hooks';\n// import { fetchRecommendBanners } from '@/views/discover/pages/recommend/store/recommend-store';\n\nconst recommendPage: React.FC = () => {\n  // const dispatch = useAppDispatch();\n  const [bannerList, setBannerList] = useState<BannerDataTemplateType[]>(\n    localCache.getCache(BANNER_IMAGE_ARRAY) || [],\n  );\n  const [visibleImages, setVisibleImages] = useState<number[]>([]);\n  // todo 初始化数据\n  useEffect(() => {\n    setBannerList([]);\n  }, []);\n\n  // todo 实现图片懒加载\n  useEffect(() => {\n    const observer: IntersectionObserver = new IntersectionObserver(\n      (entries: IntersectionObserverEntry[]) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            const index: number = Number(\n              entry.target.getAttribute('data-index'),\n            );\n            if (!visibleImages.includes(index)) {\n              setVisibleImages((prev) => [...prev, index]);\n            }\n            observer.unobserve(entry.target);\n          }\n        });\n      },\n    );\n    // todo 获取需要被监听的元素集合\n    const imgElements = document.querySelectorAll('img[data-index]');\n    imgElements.forEach((img: Element) => {\n      observer.observe(img);\n    });\n    return () => {\n      observer.disconnect();\n    };\n  }, [visibleImages]);\n\n  return (\n    <Fragment>\n      <div>\n        <div style={{ display: 'flex', overflow: 'auto' }}>\n          {bannerList &&\n            bannerList.map((item, index) => {\n              return (\n                <div key={item.id}>\n                  <a href={item.imageUrl}>\n                    <img\n                      src={item.imageUrl}\n                      data-index={index}\n                      alt={item.title}\n                      title={item.title}\n                      style={{\n                        width: `${BANNER_IMAGE_WIDTH}px`,\n                        height: `${BANNER_IMAGE_HEIGHT}px`,\n                      }}\n                    />\n                  </a>\n                </div>\n              );\n            })}\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default memo(recommendPage);\n"],"names":["recommendPage","bannerList","setBannerList","useState","localCache","getCache","BANNER_IMAGE_ARRAY","visibleImages","setVisibleImages","useEffect","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","index","Number","target","getAttribute","includes","prev","unobserve","document","querySelectorAll","img","observe","disconnect","_jsx","Fragment","children","style","display","overflow","map","item","href","imageUrl","src","alt","title","width","BANNER_IMAGE_WIDTH","height","BANNER_IMAGE_HEIGHT","id","memo"],"sourceRoot":""}